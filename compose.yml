services:
  postgresql:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: scrapper
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d scrapper || exit 1" ]
      interval: 10s
      timeout: 30s
      retries: 5
    volumes:
      - postgresql:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

  liquibase-migrations:
    image: liquibase/liquibase:4.27
    depends_on:
      postgresql:
        condition: service_healthy
    command:
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/scrapper
      - --username=postgres
      - --password=postgres
      - update
    volumes:
      - ./migrations/master.xml:/liquibase/master.xml
      - ./migrations/sql:/liquibase/sql
      - ./migrations:/liquibase/changelog
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.4
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 3
    restart: unless-stopped
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.5.4
    hostname: kafka
    container_name: kafka
    ports:
      - "9091:9091"
      - "29091:29091"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9091,PLAINTEXT_HOST://localhost:29091
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9091,PLAINTEXT_HOST://0.0.0.0:29091
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      TOPIC_AUTO_CREATE: updates.protobuf:1:1
      BOOTSTRAP_SERVERS: kafka:9091
      ZOOKEEPER: zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9091 || exit 1" ]
      interval: 10s
      timeout: 30s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - ./prometheus_data:/prometheus
    networks:
      - backend

  grafana:
    image: grafana/grafana:10.2.7
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
    networks:
      - backend

  bot:
#    image: ghcr.io/quantum1o1/tinkoff2024homeworks/bot:pr-11
    build:
      dockerfile: bot.Dockerfile
    container_name: bot
    hostname: bot
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8090:8090"
    restart: unless-stopped
    networks:
      - backend

  scrapper:
#    image: ghcr.io/quantum1o1/tinkoff2024homeworks/scrapper:pr-11
    build:
      dockerfile: scrapper.Dockerfile
    container_name: scrapper
    hostname: scrapper
    depends_on:
      postgresql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - backend

volumes:
  kafka: { }
  postgresql: { }

networks:
  backend: { }
