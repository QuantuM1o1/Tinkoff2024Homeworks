/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.scrapper.domain.jooq.tables;


import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tinkoff.edu.java.scrapper.domain.jooq.DefaultSchema;
import ru.tinkoff.edu.java.scrapper.domain.jooq.Keys;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.LinksSitesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LinksSites extends TableImpl<LinksSitesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LINKS_SITES</code>
     */
    public static final LinksSites LINKS_SITES = new LinksSites();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<LinksSitesRecord> getRecordType() {
        return LinksSitesRecord.class;
    }

    /**
     * The column <code>LINKS_SITES.ID</code>.
     */
    public final TableField<LinksSitesRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>LINKS_SITES.DOMAIN_NAME</code>.
     */
    public final TableField<LinksSitesRecord, String> DOMAIN_NAME = createField(DSL.name("DOMAIN_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private LinksSites(Name alias, Table<LinksSitesRecord> aliased) {
        this(alias, aliased, null);
    }

    private LinksSites(Name alias, Table<LinksSitesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LINKS_SITES</code> table reference
     */
    public LinksSites(String alias) {
        this(DSL.name(alias), LINKS_SITES);
    }

    /**
     * Create an aliased <code>LINKS_SITES</code> table reference
     */
    public LinksSites(Name alias) {
        this(alias, LINKS_SITES);
    }

    /**
     * Create a <code>LINKS_SITES</code> table reference
     */
    public LinksSites() {
        this(DSL.name("LINKS_SITES"), null);
    }

    public <O extends Record> LinksSites(Table<O> child, ForeignKey<O, LinksSitesRecord> key) {
        super(child, key, LINKS_SITES);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<LinksSitesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_46;
    }

    @Override
    @NotNull
    public LinksSites as(String alias) {
        return new LinksSites(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public LinksSites as(Name alias) {
        return new LinksSites(alias, this);
    }

    @Override
    @NotNull
    public LinksSites as(Table<?> alias) {
        return new LinksSites(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public LinksSites rename(String name) {
        return new LinksSites(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public LinksSites rename(Name name) {
        return new LinksSites(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public LinksSites rename(Table<?> name) {
        return new LinksSites(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
