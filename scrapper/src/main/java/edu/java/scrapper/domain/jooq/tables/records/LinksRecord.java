/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.tables.records;


import edu.java.scrapper.domain.jooq.tables.Links;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LinksRecord extends UpdatableRecordImpl<LinksRecord> implements Record7<Long, String, OffsetDateTime, OffsetDateTime, Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LINKS.ID</code>.
     */
    public void setId(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>LINKS.ID</code>.
     */
    @Nullable
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>LINKS.URL</code>.
     */
    public void setUrl(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>LINKS.URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>LINKS.UPDATED_AT</code>.
     */
    public void setUpdatedAt(@NotNull OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>LINKS.UPDATED_AT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>LINKS.LAST_ACTIVITY</code>.
     */
    public void setLastActivity(@Nullable OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>LINKS.LAST_ACTIVITY</code>.
     */
    @Nullable
    public OffsetDateTime getLastActivity() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>LINKS.SITE_ID</code>.
     */
    public void setSiteId(@NotNull Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>LINKS.SITE_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getSiteId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>LINKS.ANSWER_COUNT</code>.
     */
    public void setAnswerCount(@Nullable Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>LINKS.ANSWER_COUNT</code>.
     */
    @Nullable
    public Integer getAnswerCount() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>LINKS.COMMENT_COUNT</code>.
     */
    public void setCommentCount(@Nullable Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>LINKS.COMMENT_COUNT</code>.
     */
    @Nullable
    public Integer getCommentCount() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row7<Long, String, OffsetDateTime, OffsetDateTime, Integer, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row7<Long, String, OffsetDateTime, OffsetDateTime, Integer, Integer, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return Links.LINKS.ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Links.LINKS.URL;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field3() {
        return Links.LINKS.UPDATED_AT;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field4() {
        return Links.LINKS.LAST_ACTIVITY;
    }

    @Override
    @NotNull
    public Field<Integer> field5() {
        return Links.LINKS.SITE_ID;
    }

    @Override
    @NotNull
    public Field<Integer> field6() {
        return Links.LINKS.ANSWER_COUNT;
    }

    @Override
    @NotNull
    public Field<Integer> field7() {
        return Links.LINKS.COMMENT_COUNT;
    }

    @Override
    @Nullable
    public Long component1() {
        return getId();
    }

    @Override
    @NotNull
    public String component2() {
        return getUrl();
    }

    @Override
    @NotNull
    public OffsetDateTime component3() {
        return getUpdatedAt();
    }

    @Override
    @Nullable
    public OffsetDateTime component4() {
        return getLastActivity();
    }

    @Override
    @NotNull
    public Integer component5() {
        return getSiteId();
    }

    @Override
    @Nullable
    public Integer component6() {
        return getAnswerCount();
    }

    @Override
    @Nullable
    public Integer component7() {
        return getCommentCount();
    }

    @Override
    @Nullable
    public Long value1() {
        return getId();
    }

    @Override
    @NotNull
    public String value2() {
        return getUrl();
    }

    @Override
    @NotNull
    public OffsetDateTime value3() {
        return getUpdatedAt();
    }

    @Override
    @Nullable
    public OffsetDateTime value4() {
        return getLastActivity();
    }

    @Override
    @NotNull
    public Integer value5() {
        return getSiteId();
    }

    @Override
    @Nullable
    public Integer value6() {
        return getAnswerCount();
    }

    @Override
    @Nullable
    public Integer value7() {
        return getCommentCount();
    }

    @Override
    @NotNull
    public LinksRecord value1(@Nullable Long value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value2(@NotNull String value) {
        setUrl(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value3(@NotNull OffsetDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value4(@Nullable OffsetDateTime value) {
        setLastActivity(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value5(@NotNull Integer value) {
        setSiteId(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value6(@Nullable Integer value) {
        setAnswerCount(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value7(@Nullable Integer value) {
        setCommentCount(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord values(@Nullable Long value1, @NotNull String value2, @NotNull OffsetDateTime value3, @Nullable OffsetDateTime value4, @NotNull Integer value5, @Nullable Integer value6, @Nullable Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LinksRecord
     */
    public LinksRecord() {
        super(Links.LINKS);
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    @ConstructorProperties({ "id", "url", "updatedAt", "lastActivity", "siteId", "answerCount", "commentCount" })
    public LinksRecord(@Nullable Long id, @NotNull String url, @NotNull OffsetDateTime updatedAt, @Nullable OffsetDateTime lastActivity, @NotNull Integer siteId, @Nullable Integer answerCount, @Nullable Integer commentCount) {
        super(Links.LINKS);

        setId(id);
        setUrl(url);
        setUpdatedAt(updatedAt);
        setLastActivity(lastActivity);
        setSiteId(siteId);
        setAnswerCount(answerCount);
        setCommentCount(commentCount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    public LinksRecord(edu.java.scrapper.domain.jooq.tables.pojos.Links value) {
        super(Links.LINKS);

        if (value != null) {
            setId(value.getId());
            setUrl(value.getUrl());
            setUpdatedAt(value.getUpdatedAt());
            setLastActivity(value.getLastActivity());
            setSiteId(value.getSiteId());
            setAnswerCount(value.getAnswerCount());
            setCommentCount(value.getCommentCount());
            resetChangedOnNotNull();
        }
    }
}
