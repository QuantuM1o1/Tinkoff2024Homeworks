/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.tables;


import edu.java.scrapper.domain.jooq.DefaultSchema;
import edu.java.scrapper.domain.jooq.Keys;
import edu.java.scrapper.domain.jooq.tables.records.UsersLinksArchiveRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UsersLinksArchive extends TableImpl<UsersLinksArchiveRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>USERS_LINKS_ARCHIVE</code>
     */
    public static final UsersLinksArchive USERS_LINKS_ARCHIVE = new UsersLinksArchive();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<UsersLinksArchiveRecord> getRecordType() {
        return UsersLinksArchiveRecord.class;
    }

    /**
     * The column <code>USERS_LINKS_ARCHIVE.ID</code>.
     */
    public final TableField<UsersLinksArchiveRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>USERS_LINKS_ARCHIVE.USER_ID</code>.
     */
    public final TableField<UsersLinksArchiveRecord, Long> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>USERS_LINKS_ARCHIVE.URL</code>.
     */
    public final TableField<UsersLinksArchiveRecord, String> URL = createField(DSL.name("URL"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>USERS_LINKS_ARCHIVE.ADDED_AT</code>.
     */
    public final TableField<UsersLinksArchiveRecord, OffsetDateTime> ADDED_AT = createField(DSL.name("ADDED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>USERS_LINKS_ARCHIVE.DELETED_AT</code>.
     */
    public final TableField<UsersLinksArchiveRecord, OffsetDateTime> DELETED_AT = createField(DSL.name("DELETED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private UsersLinksArchive(Name alias, Table<UsersLinksArchiveRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersLinksArchive(Name alias, Table<UsersLinksArchiveRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>USERS_LINKS_ARCHIVE</code> table reference
     */
    public UsersLinksArchive(String alias) {
        this(DSL.name(alias), USERS_LINKS_ARCHIVE);
    }

    /**
     * Create an aliased <code>USERS_LINKS_ARCHIVE</code> table reference
     */
    public UsersLinksArchive(Name alias) {
        this(alias, USERS_LINKS_ARCHIVE);
    }

    /**
     * Create a <code>USERS_LINKS_ARCHIVE</code> table reference
     */
    public UsersLinksArchive() {
        this(DSL.name("USERS_LINKS_ARCHIVE"), null);
    }

    public <O extends Record> UsersLinksArchive(Table<O> child, ForeignKey<O, UsersLinksArchiveRecord> key) {
        super(child, key, USERS_LINKS_ARCHIVE);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<UsersLinksArchiveRecord, Long> getIdentity() {
        return (Identity<UsersLinksArchiveRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<UsersLinksArchiveRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    @NotNull
    public UsersLinksArchive as(String alias) {
        return new UsersLinksArchive(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public UsersLinksArchive as(Name alias) {
        return new UsersLinksArchive(alias, this);
    }

    @Override
    @NotNull
    public UsersLinksArchive as(Table<?> alias) {
        return new UsersLinksArchive(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public UsersLinksArchive rename(String name) {
        return new UsersLinksArchive(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public UsersLinksArchive rename(Name name) {
        return new UsersLinksArchive(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public UsersLinksArchive rename(Table<?> name) {
        return new UsersLinksArchive(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row5<Long, Long, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
