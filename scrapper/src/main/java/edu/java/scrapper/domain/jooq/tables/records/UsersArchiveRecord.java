/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.tables.records;


import edu.java.scrapper.domain.jooq.tables.UsersArchive;

import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UsersArchiveRecord extends UpdatableRecordImpl<UsersArchiveRecord> implements Record4<Long, Long, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>USERS_ARCHIVE.ID</code>.
     */
    public void setId(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>USERS_ARCHIVE.ID</code>.
     */
    @Nullable
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>USERS_ARCHIVE.TG_CHAT_ID</code>.
     */
    public void setTgChatId(@Nullable Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>USERS_ARCHIVE.TG_CHAT_ID</code>.
     */
    @Nullable
    public Long getTgChatId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>USERS_ARCHIVE.ADDED_AT</code>.
     */
    public void setAddedAt(@NotNull OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>USERS_ARCHIVE.ADDED_AT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public OffsetDateTime getAddedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>USERS_ARCHIVE.DELETED_AT</code>.
     */
    public void setDeletedAt(@Nullable OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>USERS_ARCHIVE.DELETED_AT</code>.
     */
    @Nullable
    public OffsetDateTime getDeletedAt() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<Long, Long, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row4<Long, Long, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return UsersArchive.USERS_ARCHIVE.ID;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return UsersArchive.USERS_ARCHIVE.TG_CHAT_ID;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field3() {
        return UsersArchive.USERS_ARCHIVE.ADDED_AT;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field4() {
        return UsersArchive.USERS_ARCHIVE.DELETED_AT;
    }

    @Override
    @Nullable
    public Long component1() {
        return getId();
    }

    @Override
    @Nullable
    public Long component2() {
        return getTgChatId();
    }

    @Override
    @NotNull
    public OffsetDateTime component3() {
        return getAddedAt();
    }

    @Override
    @Nullable
    public OffsetDateTime component4() {
        return getDeletedAt();
    }

    @Override
    @Nullable
    public Long value1() {
        return getId();
    }

    @Override
    @Nullable
    public Long value2() {
        return getTgChatId();
    }

    @Override
    @NotNull
    public OffsetDateTime value3() {
        return getAddedAt();
    }

    @Override
    @Nullable
    public OffsetDateTime value4() {
        return getDeletedAt();
    }

    @Override
    @NotNull
    public UsersArchiveRecord value1(@Nullable Long value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public UsersArchiveRecord value2(@Nullable Long value) {
        setTgChatId(value);
        return this;
    }

    @Override
    @NotNull
    public UsersArchiveRecord value3(@NotNull OffsetDateTime value) {
        setAddedAt(value);
        return this;
    }

    @Override
    @NotNull
    public UsersArchiveRecord value4(@Nullable OffsetDateTime value) {
        setDeletedAt(value);
        return this;
    }

    @Override
    @NotNull
    public UsersArchiveRecord values(@Nullable Long value1, @Nullable Long value2, @NotNull OffsetDateTime value3, @Nullable OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersArchiveRecord
     */
    public UsersArchiveRecord() {
        super(UsersArchive.USERS_ARCHIVE);
    }

    /**
     * Create a detached, initialised UsersArchiveRecord
     */
    @ConstructorProperties({ "id", "tgChatId", "addedAt", "deletedAt" })
    public UsersArchiveRecord(@Nullable Long id, @Nullable Long tgChatId, @NotNull OffsetDateTime addedAt, @Nullable OffsetDateTime deletedAt) {
        super(UsersArchive.USERS_ARCHIVE);

        setId(id);
        setTgChatId(tgChatId);
        setAddedAt(addedAt);
        setDeletedAt(deletedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UsersArchiveRecord
     */
    public UsersArchiveRecord(edu.java.scrapper.domain.jooq.tables.pojos.UsersArchive value) {
        super(UsersArchive.USERS_ARCHIVE);

        if (value != null) {
            setId(value.getId());
            setTgChatId(value.getTgChatId());
            setAddedAt(value.getAddedAt());
            setDeletedAt(value.getDeletedAt());
            resetChangedOnNotNull();
        }
    }
}
